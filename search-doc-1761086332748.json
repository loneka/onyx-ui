{"searchDocs":[{"title":"Badge","type":0,"sectionRef":"#","url":"/onyx-ui/api/Badge","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Badge","url":"/onyx-ui/api/Badge#types","content":" ","version":null,"tagName":"h2"},{"title":"BadgeProps​","type":1,"pageTitle":"Badge","url":"/onyx-ui/api/Badge#BadgeProps","content":"&lt;/&gt; interface BadgeProps { ...: FrameProps-- All Frame properties are accepted. Content: {string}?-- The content to display inside the badge. ContentWrapped: boolean?-- Whether the content should wrap if it overflows. Color: Color3? -- The background color of the badge. ContentColor: Color3? -- The color of the content inside the badge. ContentSize: number?-- The size of the content inside the badge. }  ","version":null,"tagName":"h3"},{"title":"Avatar","type":0,"sectionRef":"#","url":"/onyx-ui/api/Avatar","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Avatar","url":"/onyx-ui/api/Avatar#types","content":" ","version":null,"tagName":"h2"},{"title":"AvatarProps​","type":1,"pageTitle":"Avatar","url":"/onyx-ui/api/Avatar#AvatarProps","content":"&lt;/&gt; interface AvatarProps { ...: ImageProps-- All Image properties are accepted. Image: string?-- The image to display in the avatar. RingEnabled: boolean?-- Whether the ring around the avatar is enabled. RingColor: Color3? -- The color of the ring around the avatar. RingThickness: number?-- The thickness of the ring around the avatar. IndicatorEnabled: boolean?-- Whether the indicator is enabled. IndicatorColor: Color3? -- The color of the indicator. IndicatorIcon: string?-- The icon to display in the indicator. IndicatorIconColor: Color3? -- The color of the indicator icon. IndicatorCornerRadius: UDim? -- The corner radius of the indicator. }  ","version":null,"tagName":"h3"},{"title":"AutoScaler","type":0,"sectionRef":"#","url":"/onyx-ui/api/AutoScaler","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"AutoScaler","url":"/onyx-ui/api/AutoScaler#types","content":" ","version":null,"tagName":"h2"},{"title":"AutoScalerProps​","type":1,"pageTitle":"AutoScaler","url":"/onyx-ui/api/AutoScaler#AutoScalerProps","content":"&lt;/&gt; interface AutoScalerProps { ...: FrameProps-- All Frame properties are accepted. BaseResolution: Vector2 -- The base resolution to scale from. MinScale: number-- The minimum scale factor. MaxScale: number-- The maximum scale factor. ScaleMultiplier: number-- A multiplier applied to the calculated scale. }  ","version":null,"tagName":"h3"},{"title":"Button","type":0,"sectionRef":"#","url":"/onyx-ui/api/Button","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Button","url":"/onyx-ui/api/Button#types","content":" ","version":null,"tagName":"h2"},{"title":"ButtonProps​","type":1,"pageTitle":"Button","url":"/onyx-ui/api/Button#ButtonProps","content":"&lt;/&gt; interface ButtonProps { ...: BaseButtonProps-- All BaseButton properties are accepted. Disabled: boolean?-- Whether the button is disabled. Style: string?-- The style of the button (e.g., &quot;Filled&quot;, &quot;Outlined&quot;, &quot;Ghost&quot;). Color: Color3? -- The background color of the button. Content: {string}?-- The content of the button (e.g., text or icons). ContentColor: Color3? -- The color of the button's content. ContentSize: number?-- The size of the button's content. ContentWrapped: boolean?-- Whether the content should wrap. SizeVariant: &quot;ExtraSmall&quot; | &quot;Small&quot; | &quot;Medium&quot; | &quot;Large&quot; | &quot;ExtraLarge&quot;?-- The size variant of the button. Holding: boolean?-- Whether the button is being held. Hovering: boolean?-- Whether the button is being hovered over. }  ","version":null,"tagName":"h3"},{"title":"BaseButton","type":0,"sectionRef":"#","url":"/onyx-ui/api/BaseButton","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"BaseButton","url":"/onyx-ui/api/BaseButton#types","content":" ","version":null,"tagName":"h2"},{"title":"BaseButtonProps​","type":1,"pageTitle":"BaseButton","url":"/onyx-ui/api/BaseButton#BaseButtonProps","content":"&lt;/&gt; interface BaseButtonProps { ...: BaseProps-- All Base properties are accepted. Disabled: boolean?-- Whether the button is disabled. OnActivate: (() → ())?-- Callback for when the button is activated. OnHover: (() → ())?-- Callback for when the button is hovered over. OnHoverEnd: (() → ())?-- Callback for when the hover ends. OnHold: (() → ())?-- Callback for when the button is held. OnHoldEnd: (() → ())?-- Callback for when the hold ends. Hovering: boolean?-- Whether the button is currently being hovered over. Holding: boolean?-- Whether the button is currently being held. HoverSound: Sound? -- The sound to play when the button is hovered over. ClickSound: Sound? -- The sound to play when the button is clicked. }  ","version":null,"tagName":"h3"},{"title":"Card","type":0,"sectionRef":"#","url":"/onyx-ui/api/Card","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Card","url":"/onyx-ui/api/Card#types","content":" ","version":null,"tagName":"h2"},{"title":"CardProps​","type":1,"pageTitle":"Card","url":"/onyx-ui/api/Card#CardProps","content":"&lt;/&gt; interface CardProps { ...: FrameProps-- All Frame properties are accepted. }  ","version":null,"tagName":"h3"},{"title":"Divider","type":0,"sectionRef":"#","url":"/onyx-ui/api/Divider","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Divider","url":"/onyx-ui/api/Divider#types","content":" ","version":null,"tagName":"h2"},{"title":"DividerProps​","type":1,"pageTitle":"Divider","url":"/onyx-ui/api/Divider#DividerProps","content":"&lt;/&gt; interface DividerProps { ...: FrameProps-- All Frame properties are accepted. Length: UDim -- The length of the divider. FillDirection: Enum.FillDirection-- The direction in which the divider fills (Horizontal or Vertical). Color: Color3 -- The color of the divider. Transparency: number-- The transparency of the divider. Spacing: UDim -- The spacing around the divider. }  ","version":null,"tagName":"h3"},{"title":"Checkbox","type":0,"sectionRef":"#","url":"/onyx-ui/api/Checkbox","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Checkbox","url":"/onyx-ui/api/Checkbox#types","content":" ","version":null,"tagName":"h2"},{"title":"CheckboxProps​","type":1,"pageTitle":"Checkbox","url":"/onyx-ui/api/Checkbox#CheckboxProps","content":"&lt;/&gt; interface CheckboxProps { ...: BaseButtonProps-- All BaseButton properties are accepted. Checked: boolean?-- Whether the checkbox is checked. Icon: string?-- The icon to display inside the checkbox. Color: Color3? -- The color of the checkbox. }  ","version":null,"tagName":"h3"},{"title":"Group","type":0,"sectionRef":"#","url":"/onyx-ui/api/Group","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Group","url":"/onyx-ui/api/Group#types","content":" ","version":null,"tagName":"h2"},{"title":"GroupProps​","type":1,"pageTitle":"Group","url":"/onyx-ui/api/Group#GroupProps","content":"&lt;/&gt; interface GroupProps { ...: BaseProps-- All Base properties are accepted. GroupTransparency: Fusion.UsedAs&lt;number&gt;? GroupColor3: Fusion.UsedAs&lt;Color3 &gt;? }  ","version":null,"tagName":"h3"},{"title":"Heading","type":0,"sectionRef":"#","url":"/onyx-ui/api/Heading","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Heading","url":"/onyx-ui/api/Heading#types","content":" ","version":null,"tagName":"h2"},{"title":"HeadingProps​","type":1,"pageTitle":"Heading","url":"/onyx-ui/api/Heading#HeadingProps","content":"&lt;/&gt; interface HeadingProps { ...: TextProps-- All Text properties are accepted. HeadingSize: number?-- Multiplier for the text size, default is 1.75. TextSize: number?-- Base text size, default is Theme.TextSize[&quot;1&quot;]. }  ","version":null,"tagName":"h3"},{"title":"Frame","type":0,"sectionRef":"#","url":"/onyx-ui/api/Frame","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Frame","url":"/onyx-ui/api/Frame#types","content":" ","version":null,"tagName":"h2"},{"title":"FrameProps​","type":1,"pageTitle":"Frame","url":"/onyx-ui/api/Frame#FrameProps","content":"&lt;/&gt; interface FrameProps { ...: BaseProps-- All Base properties are accepted. }  ","version":null,"tagName":"h3"},{"title":"Icon","type":0,"sectionRef":"#","url":"/onyx-ui/api/Icon","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Icon","url":"/onyx-ui/api/Icon#types","content":" ","version":null,"tagName":"h2"},{"title":"IconProps​","type":1,"pageTitle":"Icon","url":"/onyx-ui/api/Icon#IconProps","content":"&lt;/&gt; interface IconProps { ...: ImageProps-- All Image properties are accepted. }  ","version":null,"tagName":"h3"},{"title":"IconButton","type":0,"sectionRef":"#","url":"/onyx-ui/api/IconButton","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"IconButton","url":"/onyx-ui/api/IconButton#types","content":" ","version":null,"tagName":"h2"},{"title":"IconButtonProps​","type":1,"pageTitle":"IconButton","url":"/onyx-ui/api/IconButton#IconButtonProps","content":"&lt;/&gt; interface IconButtonProps { ...: ButtonProps-- All Button properties are accepted. Image: string? }  ","version":null,"tagName":"h3"},{"title":"IconSwap","type":0,"sectionRef":"#","url":"/onyx-ui/api/IconSwap","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"IconSwap","url":"/onyx-ui/api/IconSwap#types","content":" ","version":null,"tagName":"h2"},{"title":"IconSwapProps​","type":1,"pageTitle":"IconSwap","url":"/onyx-ui/api/IconSwap#IconSwapProps","content":"&lt;/&gt; interface IconSwapProps { ...: IconButtonProps-- All IconButton properties are accepted. Options: {string}?-- Array of image strings to swap between Selection: number?-- The currently selected option index }  ","version":null,"tagName":"h3"},{"title":"Image","type":0,"sectionRef":"#","url":"/onyx-ui/api/Image","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Image","url":"/onyx-ui/api/Image#types","content":" ","version":null,"tagName":"h2"},{"title":"ImageProps​","type":1,"pageTitle":"Image","url":"/onyx-ui/api/Image#ImageProps","content":"&lt;/&gt; interface ImageProps { ...: BaseProps-- All Base properties are accepted. Image: string?-- The image asset ID to display. FallbackImage: string?-- The fallback image asset ID to display if Image is not provided. ImageColor3: Color3? -- The color to apply to the image. ImageTransparency: number?-- The transparency of the image. ImageRectOffset: Vector2? -- The offset of the image rectangle. ImageRectSize: Vector2? -- The size of the image rectangle. ResampleMode: Enum.ResamplerMode?-- The resampling mode for the image. ScaleType: Enum.ScaleType?-- The scaling mode for the image. SliceCenter: Rect? -- The center rectangle for 9-slice scaling. SliceScale: number?-- The scale factor for 9-slice scaling. TileSize: UDim2? -- The size of the tile for tiled images. }  ","version":null,"tagName":"h3"},{"title":"Base","type":0,"sectionRef":"#","url":"/onyx-ui/api/Base","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Base","url":"/onyx-ui/api/Base#types","content":" ","version":null,"tagName":"h2"},{"title":"GradientProps​","type":1,"pageTitle":"Base","url":"/onyx-ui/api/Base#GradientProps","content":"&lt;/&gt; interface GradientProps { Enabled: boolean?-- Whether the gradient is enabled. Color: ColorSequence? -- The color sequence of the gradient. Offset: UDim? -- The offset of the gradient. Rotation: number?-- The rotation of the gradient. Transparency: NumberSequence? -- The transparency sequence of the gradient. }   ","version":null,"tagName":"h3"},{"title":"PaddingProps​","type":1,"pageTitle":"Base","url":"/onyx-ui/api/Base#PaddingProps","content":"&lt;/&gt; interface PaddingProps { Enabled: boolean?-- Whether the padding is enabled. All: UDim? -- The padding applied to all sides. Top: UDim? -- The padding applied to the top side. Left: UDim? -- The padding applied to the left side. Right: UDim? -- The padding applied to the right side. Bottom: UDim? -- The padding applied to the bottom side. }   ","version":null,"tagName":"h3"},{"title":"CornerProps​","type":1,"pageTitle":"Base","url":"/onyx-ui/api/Base#CornerProps","content":"&lt;/&gt; interface CornerProps { Enabled: boolean?-- Whether the corner is enabled. Radius: UDim? -- The radius of the corner. }   ","version":null,"tagName":"h3"},{"title":"StrokeProps​","type":1,"pageTitle":"Base","url":"/onyx-ui/api/Base#StrokeProps","content":"&lt;/&gt; interface StrokeProps { Enabled: boolean?-- Whether the stroke is enabled. Thickness: number?-- The thickness of the stroke. Color: Color3? -- The color of the stroke. Transparency: number?-- The transparency of the stroke. LineJoinMode: Enum.LineJoinMode?-- The line join mode of the stroke. ApplyStrokeMode: Enum.ApplyStrokeMode?-- The apply stroke mode of the stroke. Offset: UDim? -- The offset of the stroke's position, relative to the parent's minimum height or width. Position: Enum.BorderStrokePosition?-- The stroke's position on its parent's border. SizingMode: Enum.StrokeSizingMode?-- The sizing mode of the stroke. ZIndex: number?-- The render order of the stroke relative to sibling stroke instances. Gradient: GradientProps?-- The gradient applied to the stroke. }   ","version":null,"tagName":"h3"},{"title":"AspectProps​","type":1,"pageTitle":"Base","url":"/onyx-ui/api/Base#AspectProps","content":"&lt;/&gt; interface AspectProps { Enabled: boolean?-- Whether the aspect ratio constraint is enabled. Ratio: number?-- The aspect ratio. Type: Enum.AspectType?-- The aspect type. DominantAxis: Enum.DominantAxis?-- The dominant axis. }   ","version":null,"tagName":"h3"},{"title":"ScaleProps​","type":1,"pageTitle":"Base","url":"/onyx-ui/api/Base#ScaleProps","content":"&lt;/&gt; interface ScaleProps { Enabled: boolean?-- Whether the scale is enabled. Scale: number?-- The scale factor. }   ","version":null,"tagName":"h3"},{"title":"FlexProps​","type":1,"pageTitle":"Base","url":"/onyx-ui/api/Base#FlexProps","content":"&lt;/&gt; interface FlexProps { Enabled: boolean?-- Whether the flex item is enabled. Mode: Enum.UIFlexMode?-- The flex mode. ItemLineAlignment: Enum.ItemLineAlignment?-- The alignment of items along the line. GrowRatio: number?-- The grow ratio of the flex item. ShrinkRatio: number?-- The shrink ratio of the flex item. }   ","version":null,"tagName":"h3"},{"title":"ListProps​","type":1,"pageTitle":"Base","url":"/onyx-ui/api/Base#ListProps","content":"&lt;/&gt; interface ListProps { Enabled: boolean?-- Whether the list layout is enabled. Padding: UDim? -- The padding between items in the list. FillDirection: Enum.FillDirection?-- The fill direction of the list. SortOrder: Enum.SortOrder?-- The sort order of the list. Wraps: boolean?-- Whether the list wraps. HorizontalAlignment: Enum.HorizontalAlignment?-- The horizontal alignment of the list. HorizontalFlex: boolean?-- Whether horizontal flex is enabled. VerticalAlignment: Enum.VerticalAlignment?-- The vertical alignment of the list. VerticalFlex: boolean?-- Whether vertical flex is enabled. ItemLineAlignment: Enum.ItemLineAlignment?-- The alignment of items along the line. }   ","version":null,"tagName":"h3"},{"title":"GridProps​","type":1,"pageTitle":"Base","url":"/onyx-ui/api/Base#GridProps","content":"&lt;/&gt; interface GridProps { Enabled: boolean?-- Whether the grid layout is enabled. CellPadding: UDim2? -- The padding between cells in the grid. CellSize: UDim2? -- The size of each cell in the grid. FillDirection: Enum.FillDirection?-- The fill direction of the grid. FillDirectionMaxCells: number?-- The maximum number of cells in the fill direction. SortOrder: Enum.SortOrder?-- The sort order of the grid. StartCorner: Enum.StartCorner?-- The starting corner of the grid. HorizontalAlignment: Enum.HorizontalAlignment?-- The horizontal alignment of the grid. VerticalAlignment: Enum.VerticalAlignment?-- The vertical alignment of the grid. }   ","version":null,"tagName":"h3"},{"title":"TableProps​","type":1,"pageTitle":"Base","url":"/onyx-ui/api/Base#TableProps","content":"&lt;/&gt; interface TableProps { Enabled: boolean?-- Whether the table layout is enabled. Padding: UDim? -- The padding between items in the table. FillEmptySpaceColumns: boolean?-- Whether empty space in columns is filled. FillEmptySpaceRows: boolean?-- Whether empty space in rows is filled. FillDirection: Enum.FillDirection?-- The fill direction of the table. SortOrder: Enum.SortOrder?-- The sort order of the table. MajorAxis: Enum.TableMajorAxis?-- The major axis of the table. HorizontalAlignment: Enum.HorizontalAlignment?-- The horizontal alignment of the table. VerticalAlignment: Enum.VerticalAlignment?-- The vertical alignment of the table. }   ","version":null,"tagName":"h3"},{"title":"PageProps​","type":1,"pageTitle":"Base","url":"/onyx-ui/api/Base#PageProps","content":"&lt;/&gt; interface PageProps { Enabled: boolean?-- Whether the page layout is enabled. Animated: boolean?-- Whether the page transitions are animated. Circular: boolean?-- Whether the pages are circular. EasingDirection: Enum.EasingDirection?-- The easing direction for transitions. EasingStyle: Enum.EasingStyle?-- The easing style for transitions. Padding: UDim? -- The padding between pages. TweenTime: number?-- The time for page transitions. FillDirection: Enum.FillDirection?-- The fill direction of the pages. SortOrder: Enum.SortOrder?-- The sort order of the pages. HorizontalAlignment: Enum.HorizontalAlignment?-- The horizontal alignment of the pages. VerticalAlignment: Enum.VerticalAlignment?-- The vertical alignment of the pages. GamepadInputEnabled: boolean?-- Whether gamepad input is enabled. ScrollWheelInputEnabled: boolean?-- Whether scroll wheel input is enabled. TouchInputEnabled: boolean?-- Whether touch input is enabled. }   ","version":null,"tagName":"h3"},{"title":"SizeLimitProps​","type":1,"pageTitle":"Base","url":"/onyx-ui/api/Base#SizeLimitProps","content":"&lt;/&gt; interface SizeLimitProps { Enabled: boolean?-- Whether the size constraint is enabled. Max: Vector2? -- The maximum size. Min: Vector2? -- The minimum size. }   ","version":null,"tagName":"h3"},{"title":"TextSizeLimitProps​","type":1,"pageTitle":"Base","url":"/onyx-ui/api/Base#TextSizeLimitProps","content":"&lt;/&gt; interface TextSizeLimitProps { Enabled: boolean?-- Whether the text size constraint is enabled. Max: number?-- The maximum text size. Min: number?-- The minimum text size. }   ","version":null,"tagName":"h3"},{"title":"BaseProps​","type":1,"pageTitle":"Base","url":"/onyx-ui/api/Base#BaseProps","content":"&lt;/&gt; interface BaseProps { ClassName: string?-- The class name of the component. Name: string?-- The name of the component. Parent: Instance? -- The parent instance of the component. Position: UDim2? -- The position of the component. Rotation: number?-- The rotation of the component. AnchorPoint: Vector2? -- The anchor point of the component. Size: UDim2? -- The size of the component. AutomaticSize: Enum.AutomaticSize?-- The automatic size of the component. Visible: boolean?-- Whether the component is visible. ZIndex: number?-- The ZIndex of the component. LayoutOrder: number?-- The layout order of the component. ClipsDescendants: boolean?-- Whether the component clips its descendants. Active: boolean?-- Whether the component is active. Selectable: boolean?-- Whether the component is selectable. Interactable: boolean?-- Whether the component is interactable. BackgroundColor3: Color3? -- The background color of the component. BackgroundTransparency: number?-- The background transparency of the component. NextSelectionDown: GuiObject? -- The next selection down. NextSelectionUp: GuiObject? -- The next selection up. NextSelectionRight: GuiObject? -- The next selection right. NextSelectionLeft: GuiObject? -- The next selection left. SelectionImageObject: GuiObject? -- The selection image object. SelectionOrder: number?-- The selection order. SizeConstraint: Enum.SizeConstraint?-- The size constraint of the component. AutoLocalize: boolean?-- Whether the component auto-localizes. RootLocalizationTable: LocalizationTable? -- The root localization table. SelectionBehaviorDown: Enum.SelectionBehavior?-- The selection behavior down. SelectionBehaviorUp: Enum.SelectionBehavior?-- The selection behavior up. SelectionBehaviorRight: Enum.SelectionBehavior?-- The selection behavior right. SelectionBehaviorLeft: Enum.SelectionBehavior?-- The selection behavior left. SelectionGroup: boolean?-- Whether the component is part of a selection group. Corner: CornerProps?-- The corner properties. Padding: PaddingProps?-- The padding properties. Stroke: StrokeProps?-- The stroke properties. Gradient: GradientProps?-- The gradient properties. Aspect: AspectProps?-- The aspect ratio properties. Scale: ScaleProps?-- The scale properties. List: ListProps?-- The list layout properties. Grid: GridProps?-- The grid layout properties. Table: TableProps?-- The table layout properties. Page: PageProps?-- The page layout properties. Flex: FlexProps?-- The flex layout properties. SizeLimit: SizeLimitProps?-- The size limit properties. TextSizeLimit: TextSizeLimitProps?-- The text size limit properties. }  ","version":null,"tagName":"h3"},{"title":"ProgressBar","type":0,"sectionRef":"#","url":"/onyx-ui/api/ProgressBar","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"ProgressBar","url":"/onyx-ui/api/ProgressBar#types","content":" ","version":null,"tagName":"h2"},{"title":"ProgressBarProps​","type":1,"pageTitle":"ProgressBar","url":"/onyx-ui/api/ProgressBar#ProgressBarProps","content":"&lt;/&gt; interface ProgressBarProps { ...: FrameProps-- All Frame properties are accepted. Inverted: boolean?-- Whether the progress bar is inverted. Progress: number?-- The progress value, ranging from 0 to 1. Color: Color3? -- The color of the progress fill. Direction: Enum.FillDirection?-- The direction of the progress bar (Horizontal or Vertical). Length: UDim? -- The length of the progress bar. }  ","version":null,"tagName":"h3"},{"title":"Scroller","type":0,"sectionRef":"#","url":"/onyx-ui/api/Scroller","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Scroller","url":"/onyx-ui/api/Scroller#types","content":" ","version":null,"tagName":"h2"},{"title":"ScrollerProps​","type":1,"pageTitle":"Scroller","url":"/onyx-ui/api/Scroller#ScrollerProps","content":"&lt;/&gt; interface ScrollerProps { ...: BaseProps-- All Base properties are accepted. AutomaticCanvasSize: Enum.AutomaticSize?-- Determines whether the canvas size is automatically adjusted. BottomImage: string?-- The image used for the bottom scroll bar. CanvasPosition: Vector2? -- The position of the canvas. CanvasSize: UDim2? -- The size of the canvas. ElasticBehavior: Enum.ElasticBehavior?-- Determines the elastic behavior of the scrolling frame. HorizontalScrollBarInset: Enum.ScrollBarInset?-- Determines the inset behavior of the horizontal scroll bar. MidImage: string?-- The image used for the middle scroll bar. ScrollBarImageColor3: Color3? -- The color of the scroll bar image. ScrollBarImageTransparency: number?-- The transparency of the scroll bar image. ScrollBarThickness: number?-- The thickness of the scroll bar. ScrollingDirection: Enum.ScrollingDirection?-- The direction in which scrolling is allowed. ScrollingEnabled: boolean?-- Determines whether scrolling is enabled. TopImage: string?-- The image used for the top scroll bar. VerticalScrollBarInset: Enum.ScrollBarInset?-- Determines the inset behavior of the vertical scroll bar. VerticalScrollBarPosition: Enum.VerticalScrollBarPosition?-- Determines the position of the vertical scroll bar. }  ","version":null,"tagName":"h3"},{"title":"IconText","type":0,"sectionRef":"#","url":"/onyx-ui/api/IconText","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"IconText","url":"/onyx-ui/api/IconText#types","content":" ","version":null,"tagName":"h2"},{"title":"IconTextProps​","type":1,"pageTitle":"IconText","url":"/onyx-ui/api/IconText#IconTextProps","content":"&lt;/&gt; interface IconTextProps { ...: FrameProps-- All Frame properties are accepted. Content: {string}?-- The content to display, can include both text and icons. ContentColor: Color3? -- The color of the content. ContentSize: number?-- The size of the content. ContentTransparency: number?-- The transparency of the content. ContentWrapped: boolean?-- Whether the text content should wrap. ContentRichText: boolean?-- Whether the text content supports rich text. ContentFontFace: Font? -- The font face of the text content. }  ","version":null,"tagName":"h3"},{"title":"Switch","type":0,"sectionRef":"#","url":"/onyx-ui/api/Switch","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Switch","url":"/onyx-ui/api/Switch#types","content":" ","version":null,"tagName":"h2"},{"title":"SwitchProps​","type":1,"pageTitle":"Switch","url":"/onyx-ui/api/Switch#SwitchProps","content":"&lt;/&gt; interface SwitchProps { ...: BaseButtonProps-- All BaseButton properties are accepted. Switched: boolean?-- Whether the switch is toggled on or off Disabled: boolean?-- Whether the switch is disabled Color: Color3? -- The color of the switch when toggled on }  ","version":null,"tagName":"h3"},{"title":"Tabs","type":0,"sectionRef":"#","url":"/onyx-ui/api/Tabs","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Tabs","url":"/onyx-ui/api/Tabs#types","content":" ","version":null,"tagName":"h2"},{"title":"TabsProps​","type":1,"pageTitle":"Tabs","url":"/onyx-ui/api/Tabs#TabsProps","content":"&lt;/&gt; interface TabsProps { ...: ButtonProps-- All Button properties are accepted. Tabs: {{string}}?-- List of tabs Tab: number?-- The currently active tab Disabled: boolean?-- Whether the tabs are disabled Color: Color3? -- Color of the active tab ButtonProps: Button.Props?-- Property overrides for child buttons }  ","version":null,"tagName":"h3"},{"title":"Slider","type":0,"sectionRef":"#","url":"/onyx-ui/api/Slider","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Slider","url":"/onyx-ui/api/Slider#types","content":" ","version":null,"tagName":"h2"},{"title":"SliderProps​","type":1,"pageTitle":"Slider","url":"/onyx-ui/api/Slider#SliderProps","content":"&lt;/&gt; interface SliderProps { ...: BaseButtonProps-- All BaseButton properties are accepted. Value: number?-- The current value of the slider (0 to 1). Disabled: boolean?-- Whether the slider is disabled. Unit: number?-- The step size for the slider value. Color: Color3? -- The color of the slider. }  ","version":null,"tagName":"h3"},{"title":"Text","type":0,"sectionRef":"#","url":"/onyx-ui/api/Text","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Text","url":"/onyx-ui/api/Text#types","content":" ","version":null,"tagName":"h2"},{"title":"TextProps​","type":1,"pageTitle":"Text","url":"/onyx-ui/api/Text#TextProps","content":"&lt;/&gt; interface TextProps { ...: BaseProps-- All Base properties are accepted. Text: string?-- The text to display. TextColor3: Color3? -- The color of the text. TextSize: number?-- The size of the text. RichText: boolean?-- Whether the text supports rich text formatting. FontFace: Font? -- The font face of the text. TextWrapped: boolean?-- Whether the text should wrap when it exceeds the label's width. TextXAlignment: Enum.TextXAlignment?-- The horizontal alignment of the text. TextYAlignment: Enum.TextYAlignment?-- The vertical alignment of the text. Font: Enum.Font?-- The font of the text (deprecated, use FontFace instead). TextScaled: boolean?-- Whether the text should scale to fit the label. TextTruncate: boolean?-- Whether the text should truncate when it exceeds the label's width. LineHeight: number?-- The line height of the text. LocalizedText: string?-- The localized text to display. MaxVisibleGraphemes: number?-- The maximum number of visible graphemes. TextTransparency: number?-- The transparency of the text. }  ","version":null,"tagName":"h3"},{"title":"TextArea","type":0,"sectionRef":"#","url":"/onyx-ui/api/TextArea","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"TextArea","url":"/onyx-ui/api/TextArea#types","content":" ","version":null,"tagName":"h2"},{"title":"TextAreaProps​","type":1,"pageTitle":"TextArea","url":"/onyx-ui/api/TextArea#TextAreaProps","content":"&lt;/&gt; interface TextAreaProps { ...: TextInputProps-- All TextInput properties are accepted. }  ","version":null,"tagName":"h3"},{"title":"Themer","type":0,"sectionRef":"#","url":"/onyx-ui/api/Themer","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Themer","url":"/onyx-ui/api/Themer#types","content":" ","version":null,"tagName":"h2"},{"title":"ThemeSpec​","type":1,"pageTitle":"Themer","url":"/onyx-ui/api/Themer#ThemeSpec","content":"&lt;/&gt; type ThemeSpec = table A specification table for theme properties. Check out ThemeSpec.luau for a full reference of available theme properties.  ","version":null,"tagName":"h3"},{"title":"Theme​","type":1,"pageTitle":"Themer","url":"/onyx-ui/api/Themer#Theme","content":"&lt;/&gt; type Theme = table An active theme to be referenced in UI. ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Themer","url":"/onyx-ui/api/Themer#properties","content":" ","version":null,"tagName":"h2"},{"title":"Theme​","type":1,"pageTitle":"Themer","url":"/onyx-ui/api/Themer#Theme","content":"&lt;/&gt; Themer.Theme: Fusion.Contextual&lt;Theme&gt; The currently active theme. Use Themer.Theme:now() to get the active theme, and Themer.Theme:is(MyTheme):during() to make code use another theme. See Fusion Contextuals for more information. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Themer","url":"/onyx-ui/api/Themer#functions","content":" ","version":null,"tagName":"h2"},{"title":"NewTheme​","type":1,"pageTitle":"Themer","url":"/onyx-ui/api/Themer#NewTheme","content":"&lt;/&gt; Themer.NewTheme( Scope: Fusion.Scope&lt;any&gt;, ThemeSpec: ThemeSpec ) → Theme Creates the specified theme. ","version":null,"tagName":"h3"},{"title":"TextSwap","type":0,"sectionRef":"#","url":"/onyx-ui/api/TextSwap","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"TextSwap","url":"/onyx-ui/api/TextSwap#types","content":" ","version":null,"tagName":"h2"},{"title":"TextSwapProps​","type":1,"pageTitle":"TextSwap","url":"/onyx-ui/api/TextSwap#TextSwapProps","content":"&lt;/&gt; interface TextSwapProps { ...: BaseButtonProps-- All BaseButton properties are accepted. Options: {string}?-- Array of string options to swap between Selection: number?-- The currently selected option index Disabled: boolean?-- Whether the TextSwap is disabled Color: Color3? -- The color of the content ContentSize: number?-- The size of the content }  ","version":null,"tagName":"h3"},{"title":"TextInput","type":0,"sectionRef":"#","url":"/onyx-ui/api/TextInput","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"TextInput","url":"/onyx-ui/api/TextInput#types","content":" ","version":null,"tagName":"h2"},{"title":"TextInputProps​","type":1,"pageTitle":"TextInput","url":"/onyx-ui/api/TextInput#TextInputProps","content":"&lt;/&gt; interface TextInputProps { ...: BaseProps-- All Base properties are accepted. Disabled: boolean?-- Whether the text input is disabled. CharacterLimit: number?-- The maximum number of characters allowed in the text input. Color: Color3? -- The color of the text input's border when focused. PlaceholderText: string?-- The placeholder text displayed when the input is empty. Text: string?-- The current text in the text input. ClearTextOnFocus: boolean?-- Whether the text should be cleared when the input gains focus. TextWrapped: boolean?-- Whether the text should wrap within the input. TextEditable: boolean?-- Whether the text input is editable. MultiLine: boolean?-- Whether the text input supports multiple lines. TextSize: number?-- The size of the text. TextColor3: Color3? -- The color of the text. FontFace: Font? -- The font face of the text. PlaceholderColor3: Color3? -- The color of the placeholder text. TextXAlignment: Enum.TextXAlignment?-- The horizontal alignment of the text. TextYAlignment: Enum.TextYAlignment?-- The vertical alignment of the text. TextTransparency: number?-- The transparency of the text. TextProcessor: (string) → string?-- A function to process the text input, and return new text. Focusing: boolean?-- Whether the text input is currently focused. Hovering: boolean?-- Whether the mouse is hovering over the text input. OnFocus: () → ()?-- A callback function triggered when the text input gains focus. OnFocusEnd: () → ()?-- A callback function triggered when the text input loses focus. }  ","version":null,"tagName":"h3"},{"title":"Components","type":0,"sectionRef":"#","url":"/onyx-ui/docs/components","content":"Components Components are like reusable pieces of UI. These can be generalized, like a button or a toggle, or they can be very specific, like a whole settings menu. OnyxUI provides you with a variety of general components, so you can focus on achieving your design. Explore components ➜","keywords":"","version":"Next"},{"title":"TitleBar","type":0,"sectionRef":"#","url":"/onyx-ui/api/TitleBar","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"TitleBar","url":"/onyx-ui/api/TitleBar#types","content":" ","version":null,"tagName":"h2"},{"title":"TitleBarProps​","type":1,"pageTitle":"TitleBar","url":"/onyx-ui/api/TitleBar#TitleBarProps","content":"&lt;/&gt; interface TitleBarProps { ...: FrameProps-- All Frame properties are accepted. Content: {string}?-- The content of the title bar. ContentSize: number?-- The size of the content text. ContentColor: Color3? -- The color of the content text. ContentFontFace: Font? -- The font face of the content text. CloseButtonIcon: string?-- The icon for the close button. CloseButtonDisabled: boolean?-- Whether the close button is disabled. OnClose: (() → ())?-- The callback function when the close button is clicked. }  ","version":null,"tagName":"h3"},{"title":"Examples","type":0,"sectionRef":"#","url":"/onyx-ui/docs/examples","content":"","keywords":"","version":"Next"},{"title":"HD Admin v2​","type":1,"pageTitle":"Examples","url":"/onyx-ui/docs/examples#hd-admin-v2","content":"   ","version":"Next","tagName":"h2"},{"title":"Avalog​","type":1,"pageTitle":"Examples","url":"/onyx-ui/docs/examples#avalog","content":"   ","version":"Next","tagName":"h2"},{"title":"Scribel​","type":1,"pageTitle":"Examples","url":"/onyx-ui/docs/examples#scribel","content":"   ","version":"Next","tagName":"h2"},{"title":"Rorooms​","type":1,"pageTitle":"Examples","url":"/onyx-ui/docs/examples#rorooms","content":"   ","version":"Next","tagName":"h2"},{"title":"Loneka Menu​","type":1,"pageTitle":"Examples","url":"/onyx-ui/docs/examples#loneka-menu","content":"     List your project If you're working on something cool, send it in the Discord! ","version":"Next","tagName":"h2"},{"title":"Util","type":0,"sectionRef":"#","url":"/onyx-ui/api/Util","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Util","url":"/onyx-ui/api/Util#properties","content":" ","version":null,"tagName":"h2"},{"title":"Colors​","type":1,"pageTitle":"Util","url":"/onyx-ui/api/Util#Colors","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Util.Colors: table Colors imported from TailwindCSS's color palette. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Util","url":"/onyx-ui/api/Util#functions","content":" ","version":null,"tagName":"h2"},{"title":"Emphasize​","type":1,"pageTitle":"Util","url":"/onyx-ui/api/Util#Emphasize","content":"&lt;/&gt; Util.Emphasize( Color: Color3 , Emphasis: number ) → Color3  Lightens/darkens the given color, with respect to &quot;true&quot; (perceived) brightness. Check out ColorUtils for a more comprehensive set of color utilities.  ","version":null,"tagName":"h3"},{"title":"CombineProps​","type":1,"pageTitle":"Util","url":"/onyx-ui/api/Util#CombineProps","content":"&lt;/&gt; Util.CombineProps( Source: Fusion.PropertyTable, Target: Fusion.PropertyTable, ExcludedKeys: {any}? ) → Fusion.PropertyTable Combines two sets of props for easy passthrough, adding Source's props to Target. If a prop is already in Target, it will be overridden.  ","version":null,"tagName":"h3"},{"title":"Fallback​","type":1,"pageTitle":"Util","url":"/onyx-ui/api/Util#Fallback","content":"&lt;/&gt; Util.Fallback( Value: Fusion.UsedAs&lt;any&gt;, Fallback: any ) → any Defaults the given Value to Fallback if nil.  ","version":null,"tagName":"h3"},{"title":"EnsureValue​","type":1,"pageTitle":"Util","url":"/onyx-ui/api/Util#EnsureValue","content":"&lt;/&gt; Util.EnsureValue( Scope: Fusion.Scope&lt;any&gt;, Value: Fusion.UsedAs&lt;any&gt; ) → Fusion.Value&lt;Fusion.Scope&lt;any&gt;,any&gt; Converts the Value argument to a Fusion.Value object, if it is not one already.  ","version":null,"tagName":"h3"},{"title":"Vector2​","type":1,"pageTitle":"Util","url":"/onyx-ui/api/Util#Vector2","content":"&lt;/&gt; Util.Vector2( Scope: Fusion.Scope(typeof(Fusion)), X: Fusion.UsedAs&lt;number&gt;, Y: Fusion.UsedAs&lt;number&gt; ) → Fusion.Computed&lt;Vector2 &gt;   ","version":null,"tagName":"h3"},{"title":"UDim​","type":1,"pageTitle":"Util","url":"/onyx-ui/api/Util#UDim","content":"&lt;/&gt; Util.UDim( Scope: Fusion.Scope&lt;typeof(Fusion)&gt;, Scale: Fusion.UsedAs&lt;number&gt;, Offset: Fusion.UsedAs&lt;number&gt; ) → Fusion.Computed&lt;UDim &gt;   ","version":null,"tagName":"h3"},{"title":"UDim2​","type":1,"pageTitle":"Util","url":"/onyx-ui/api/Util#UDim2","content":"&lt;/&gt; Util.UDim2( Scope: Fusion.Scope&lt;typeof(Fusion)&gt;, XScale: Fusion.UsedAs&lt;number&gt;, XOffset: Fusion.UsedAs&lt;number&gt;, YScale: Fusion.UsedAs&lt;number&gt;, YOffset: Fusion.UsedAs&lt;number&gt; ) → Fusion.Computed&lt;UDim2 &gt;   ","version":null,"tagName":"h3"},{"title":"UDim2Offset​","type":1,"pageTitle":"Util","url":"/onyx-ui/api/Util#UDim2Offset","content":"&lt;/&gt; Util.UDim2Offset( Scope: Fusion.Scope&lt;typeof(Fusion)&gt;, X: Fusion.UsedAs&lt;number&gt;, Y: Fusion.UsedAs&lt;number&gt; ) → Fusion.Computed&lt;UDim2 &gt;   ","version":null,"tagName":"h3"},{"title":"UDim2Scale​","type":1,"pageTitle":"Util","url":"/onyx-ui/api/Util#UDim2Scale","content":"&lt;/&gt; Util.UDim2Scale( Scope: Fusion.Scope&lt;typeof(Fusion)&gt;, X: Fusion.UsedAs&lt;number&gt;, Y: Fusion.UsedAs&lt;number&gt; ) → Fusion.Computed&lt;UDim2 &gt;   ","version":null,"tagName":"h3"},{"title":"Font​","type":1,"pageTitle":"Util","url":"/onyx-ui/api/Util#Font","content":"&lt;/&gt; Util.Font( Scope: Fusion.Scope&lt;typeof(Fusion)&gt;, X: Fusion.UsedAs&lt;number&gt;, Y: Fusion.UsedAs&lt;number&gt; ) → Fusion.Computed&lt;Font &gt;  ","version":null,"tagName":"h3"},{"title":"Theming","type":0,"sectionRef":"#","url":"/onyx-ui/docs/theming","content":"","keywords":"","version":"Next"},{"title":"Accessing the theme​","type":1,"pageTitle":"Theming","url":"/onyx-ui/docs/theming#accessing-the-theme","content":" A card making use of the theme for color, stroke and padding:  local Theme = OnyxUI.Themer.Theme:now() Scope:Card { BackgroundColor3 = Theme.Colors.Neutral.Main, Stroke = { Thickness = Theme.StrokeThickness[&quot;2&quot;], }, Padding = { All = Scope:UDim(0, Theme.Spacing[&quot;2&quot;]) } }   ","version":"Next","tagName":"h2"},{"title":"Making your own theme​","type":1,"pageTitle":"Theming","url":"/onyx-ui/docs/theming#making-your-own-theme","content":" tip Check out ThemeSpec.luau for a full reference of available theme properties. The default OnyxUI theme can also be found here.  Copy the following code into a new &quot;MyTheme&quot; module  local Themer = OnyxUI.Themer local Scope = Fusion.scoped() local MyTheme = Themer.NewTheme(Scope, { -- Specify theme properties here }) return MyTheme   Specify the properties you wantUse it when constructing your UI  local MyTheme = require(path.to.MyTheme) local Themer = OnyxUI.Themer Themer.Theme:is(MyTheme):during(function() local Theme = Themer.Theme:now() -- This now returns MyTheme! -- Any UI constructed from this callback will also use MyTheme. end)  ","version":"Next","tagName":"h2"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/onyx-ui/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"/onyx-ui/docs/intro#installation","content":" ","version":"Next","tagName":"h2"},{"title":"Wally package​","type":1,"pageTitle":"Getting Started","url":"/onyx-ui/docs/intro#wally-package","content":" Copy the Wally detailsPaste it into your wally.toml dependenciesRun wally install  ","version":"Next","tagName":"h3"},{"title":"Roblox model​","type":1,"pageTitle":"Getting Started","url":"/onyx-ui/docs/intro#roblox-model","content":" Important When using the rbxm, you must require the copy of Fusion bundled within it, rather than your own install. Or alternatively, switch to Wally to avoid this altogether.  Download the OnyxUI.rbxm file listed hereInsert OnyxUI.rbxm into Roblox Studio  ","version":"Next","tagName":"h3"},{"title":"Previewing​","type":1,"pageTitle":"Getting Started","url":"/onyx-ui/docs/intro#previewing","content":" Preview and interact with OnyxUI components live:  Open a place with OnyxUI installedInstall the UI Labs Studio pluginOpen UI LabsOpen the OnyxUI story, and select a component  ","version":"Next","tagName":"h2"},{"title":"Usage example​","type":1,"pageTitle":"Getting Started","url":"/onyx-ui/docs/intro#usage-example","content":" Here's a basic text button component example, making use of some of OnyxUI's features:  local OnyxUI = require(path.to.OnyxUI) local Fusion = require(path.to.Fusion) export type TextButtonProps = OnyxUI.ButtonProps &amp; { Text: Fusion.UsedAs&lt;string&gt;?, } return function(Scope: Fusion.Scope&lt;any&gt;, Props: TextButtonProps) local Scope = Fusion.innerScope(Scope, Fusion, OnyxUI.Util, OnyxUI.Components) local Theme = OnyxUI.Themer.Theme:now() local Text = OnyxUI.Util.Fallback(Props.Text, &quot;Hello World&quot;) return Scope:Button(OnyxUI.Util.CombineProps(Props, { Name = script.Name, Content = Scope:Computed(function(Use) local TextValue = Use(Text) return { TextValue } end), Color = Theme.Colors.Primary.Main, SizeVariant = &quot;Large&quot;, Size = Scope:UDim(0, Theme.Sizing[&quot;8&quot;]), List = { FillDirection = Enum.FillDirection.Vertical, } })) end  ","version":"Next","tagName":"h2"},{"title":"Utilities","type":0,"sectionRef":"#","url":"/onyx-ui/docs/utilities","content":"","keywords":"","version":"Next"},{"title":"Fallback​","type":1,"pageTitle":"Utilities","url":"/onyx-ui/docs/utilities#fallback","content":" Guarantee your props to fall back on a default value.  return function(Props) local Color = OnyxUI.Util.Fallback(Props.Color, Theme.Colors.Neutral.Main) end   ","version":"Next","tagName":"h2"},{"title":"CombineProps​","type":1,"pageTitle":"Utilities","url":"/onyx-ui/docs/utilities#combineprops","content":" Automatically support every single OnyxUI property available, right in your custom component. Size, Position, Padding, etc. Every. single. one.  return function(Scope, Props) local Scope = Fusion.innerScope(Scope, Fusion, OnyxUI.Util, OnyxUI.Components) local Theme = Themer.Theme:now() return Scope:BaseButton(OnyxUI.Util.CombineProps(Props, { BackgroundTransparency = 0, Corner = { Radius = Scope:UDim(0, Theme.CornerRadius[&quot;2&quot;]), }, -- All properties from OnyxUI's `BaseButton` component will now work. })) end   ","version":"Next","tagName":"h2"},{"title":"EnsureValue​","type":1,"pageTitle":"Utilities","url":"/onyx-ui/docs/utilities#ensurevalue","content":" Want to ensure your component props are Fusion Values? This makes it a one-line operation.  return function(Scope, Props) local Scope = Fusion.innerScope(Scope, OnyxUI.Util) local MyProp = Scope:EnsureValue(Props.MyProp) end   ","version":"Next","tagName":"h2"},{"title":"Colors​","type":1,"pageTitle":"Utilities","url":"/onyx-ui/docs/utilities#colors","content":" Color shorthands imported from TailwindCSS's color palette. So you don't have to worry about color picking anymore.  Scope:Button { Color = OnyxUI.Util.Colors.Red[&quot;500&quot;], -- Shade &quot;500&quot; of Colors.Red }   ","version":"Next","tagName":"h2"},{"title":"Units​","type":1,"pageTitle":"Utilities","url":"/onyx-ui/docs/utilities#units","content":" Compute reactive units with less code.  return function(Scope, Props) local Scope = Fusion.innerScope(Fusion, OnyxUI.Util) local Theme = Themer.Theme:now() Scope:Card { Padding = { All = Scope:UDim(0, Theme.Padding[&quot;2&quot;]) } } end  ","version":"Next","tagName":"h2"},{"title":"Styling","type":0,"sectionRef":"#","url":"/onyx-ui/docs/styling","content":"","keywords":"","version":"Next"},{"title":"Traditional styling​","type":1,"pageTitle":"Styling","url":"/onyx-ui/docs/styling#traditional-styling","content":" Traditional properties like BackgroundColor3 are supported identically to how Roblox does it. Use these as you would normally. There are exceptions however, like how Color is preferred over BackgroundColor3 in Button.  ","version":"Next","tagName":"h2"},{"title":"Children-based styling​","type":1,"pageTitle":"Styling","url":"/onyx-ui/docs/styling#children-based-styling","content":" UIPaddings, UIStrokes, UIListLayouts... Children-based styling is just too much mess. In OnyxUI, all components support an extensive set of props to avoid working with these objects, while offering their benefits.  tip The styles below also support Enabled for easily enabling/disabling their effects.  ","version":"Next","tagName":"h2"},{"title":"Corner Radius​","type":1,"pageTitle":"Styling","url":"/onyx-ui/docs/styling#corner-radius","content":" Corner = { Radius = UDim.new(0, 4) }   ","version":"Next","tagName":"h3"},{"title":"Stroke​","type":1,"pageTitle":"Styling","url":"/onyx-ui/docs/styling#stroke","content":" Stroke = { Color = Color3.fromRGB(255, 255, 255), Thickness = 2, Transparency = 0, ApplyStrokeMode = Enum.ApplyStrokeMode.Border, LineJoinMode = Enum.LineJoinMode.Round, }   Stroke with gradient:  Stroke = { Color = Color3.fromRGB(255, 255, 255), Gradient = { Color = ColorSequence.new() } }   ","version":"Next","tagName":"h3"},{"title":"Gradient​","type":1,"pageTitle":"Styling","url":"/onyx-ui/docs/styling#gradient","content":" Gradient = { Color = ColorSequence.new(), Rotation = 90, Transparency = 0, Offset = 0, }   ","version":"Next","tagName":"h3"},{"title":"Padding​","type":1,"pageTitle":"Styling","url":"/onyx-ui/docs/styling#padding","content":" Equal-sided padding:  Padding = { All = UDim.new(0, 4), }   Individual padding:  Padding = { Top = UDim.new(0, 4), Left = UDim.new(0, 8), Right = UDim.new(0, 8), Bottom = UDim.new(0, 4), }   ","version":"Next","tagName":"h3"},{"title":"Flex​","type":1,"pageTitle":"Styling","url":"/onyx-ui/docs/styling#flex","content":" Fill the parent container:  Flex = { Mode = Enum.FlexMode.Fill, }   Grow with a custom ratio, center-aligned:  Flex = { Mode = Enum.FlexMode.Grow, GrowRatio = 1, ShrinkRatio = 0, ItemLineAlignment = Enum.ItemLineAlignment.Center, }   ","version":"Next","tagName":"h3"},{"title":"List​","type":1,"pageTitle":"Styling","url":"/onyx-ui/docs/styling#list","content":" Vertical list:  List = { FillDirection = Enum.FillDirection.Vertical, HorizontalFlex = Enum.UIFlexAlignment.Fill, Padding = UDim.new(0, 8), }   Horizontal-filled, vertically-wrapping, centered list:  List = { FillDirection = Enum.FillDirection.Horizontal, HorizontalAlignment = Enum.HorizontalAlignment.Center, VerticalAlignment = Enum.VerticalAlignment.Center, Padding = UDim.new(0, 8), Wraps = true, }   ","version":"Next","tagName":"h3"},{"title":"Grid​","type":1,"pageTitle":"Styling","url":"/onyx-ui/docs/styling#grid","content":" Horizontally-filled grid:  Grid = { FillDirection = Enum.FillDirection.Horizontal, CellSize = UDim2.fromOffset(100, 100), CellPadding = UDim2.fromOffset(20, 20), }   ","version":"Next","tagName":"h3"},{"title":"Other Layouts​","type":1,"pageTitle":"Styling","url":"/onyx-ui/docs/styling#other-layouts","content":" Other layouts like UITableLayout and UIPageLayout are generally inferior and unused. For API reference, see the Base component's source code.  ","version":"Next","tagName":"h3"},{"title":"Aspect ratio​","type":1,"pageTitle":"Styling","url":"/onyx-ui/docs/styling#aspect-ratio","content":" Square-locked size:  Aspect = { Ratio = 1, }   Growing with parent:  Aspect = { Ratio = 1, Type = Enum.AspectType.ScaleWithParentSize, DominantAxis = Enum.DominantAxis.Height, }   ","version":"Next","tagName":"h3"},{"title":"Scale​","type":1,"pageTitle":"Styling","url":"/onyx-ui/docs/styling#scale","content":" Scaled by 2x:  Scale = { Scale = 2, }   ","version":"Next","tagName":"h3"},{"title":"Size limit​","type":1,"pageTitle":"Styling","url":"/onyx-ui/docs/styling#size-limit","content":" Smaller than 100x 100y:  SizeLimit = { Max = Vector2.new(100, 100), Min = Vector2.new(0, 0), }   ","version":"Next","tagName":"h3"},{"title":"Text size limit​","type":1,"pageTitle":"Styling","url":"/onyx-ui/docs/styling#text-size-limit","content":" Smaller than 24, bigger than 12:  TextSizeLimit = { Max = 24, Min = 12, }   ","version":"Next","tagName":"h3"},{"title":"Using in custom components​","type":1,"pageTitle":"Styling","url":"/onyx-ui/docs/styling#using-in-custom-components","content":" To support styling props in your own components, make use of the CombineProps utility to pass props through automatically. Your component must be based upon an OnyxUI component such as Base for this to work. ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}